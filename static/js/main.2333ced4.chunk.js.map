{"version":3,"sources":["Show.js","Practice.js","Content.js","Actions.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","tableWrapper","maxHeight","overflow","StickyHeadTable","props","classes","React","useState","page","setPage","rowsPerPage","setRowsPerPage","words","direction","rows","wrong","correct","result","i","length","arm","eng","word","correctness","includes","push","createData","columns","id","label","minWidth","createColumns","emptyRows","Math","min","Paper","className","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","key","align","style","TableBody","slice","row","index","hover","role","tabIndex","value","format","height","colSpan","TablePagination","rowsPerPageOptions","component","count","backIconButtonProps","nextIconButtonProps","onChangePage","event","newPage","onChangeRowsPerPage","target","CssTextField","withStyles","color","borderBottomColor","borderColor","TextField","Practice","handleChange","document","getElementById","setState","answer","hint","state","rightAnswer","answered","changeIndex","new_index","parseInt","editIndex","split","handleKeyPress","addWord","update","wrongWords","filter","n","helperText","this","Typography","variant","Button","size","button","endIcon","onClick","defaultValue","textField","Grid","container","spacing","item","xs","join","onChange","onKeyPress","margin","autoComplete","autoFocus","Component","textAlign","marginLeft","Content","isCorrect","pop","indexOf","all","level","request","XMLHttpRequest","open","send","onreadystatechange","readyState","status","getResponseHeader","responseText","innerHTML","nextProps","nextState","mode","order","trim","eng_words","j","arm_words","uniqueResult","includesWords","fixDirection","sort","a","b","toLowerCase","temporaryValue","randomIndex","currentIndex","floor","random","orderWords","CRadio","checked","Radio","theme","flexGrow","paper","padding","palette","text","secondary","menu","backgroundImage","modes","CenteredGrid","setDirection","setMode","setCount","setOrder","anchorElShow","setAnchorElShow","anchorElPractice","setAnchorElPractice","handleClick","what","stopPropagation","currentTarget","handleClose","changeCount","gutterBottom","parts","toUpperCase","getLevelName","fontSize","fullWidth","e","marginTop","Menu","anchorEl","keepMounted","Boolean","onClose","MenuItem","FormControl","RadioGroup","aria-label","name","FormControlLabel","control","labelPlacement","createMuiTheme","typography","useNextVariants","primary","main","contrastThreshold","tonalOffset","SELECTS","getLabelName","TabPanel","children","other","hidden","aria-labelledby","Box","p","backgroundColor","background","display","tabs","borderRight","divider","window","location","hostname","match","ReactDOM","render","setValue","MuiThemeProvider","Tabs","orientation","newValue","Tab","a11yProps","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2333ced4.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nfunction createData(words, direction, wrong, correct) {  \n    const result = []\n    for (let i=0; i<words.length; i+=1){\n        const arm = direction? words[i][0]: words[i][1];\n        const eng = direction? words[i][1]: words[i][0];\n        const word = `${eng} * ${arm}`;\n        const correctness = wrong.includes(word)? 'wrong': (correct.includes(word)? 'correct': 'not practiced');\n        result.push({ arm, eng, correctness });\n    }\n    return result;\n}\n\nfunction createColumns(direction){\n    return direction? \n    [\n        { id: \"arm\", label: \"Armenian\", minWidth: 200 },\n        { id: \"eng\", label: \"English\", minWidth: 200 },\n        { id: \"correctness\", label: \"Correctness\", minWidth: 200 },\n    ] :\n    [\n        { id: \"eng\", label: \"English\", minWidth: 200 },\n        { id: \"arm\", label: \"Armenian\", minWidth: 200 },\n        { id: \"wrocorrectnessng\", label: \"Correctness\", minWidth: 200 },\n    ];\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\"\n  },\n  tableWrapper: {\n    maxHeight: 407,\n    overflow: \"auto\"\n  }\n});\n\nexport default function StickyHeadTable(props) {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const {words, direction, wrong, correct} = props;\n  const rows = createData(words, direction, wrong, correct);\n  const columns = createColumns(direction);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n        <Table stickyHeader>\n          <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.label}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  <b>{column.label}</b>\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row, index) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\n                    {columns.map(column => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={`cell${column.label}`} align={column.align}>\n                          {column.format && typeof value === \"number\"\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n          </TableBody>\n        </Table>\n      </div>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        backIconButtonProps={{\n          \"aria-label\": \"previous page\"\n        }}\n        nextIconButtonProps={{\n          \"aria-label\": \"next page\"\n        }}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Cancel';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport TextField from '@material-ui/core/TextField';import Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nconst CssTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: '#8ED0B1',\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: '#8ED0B1',\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        borderColor: '#8ED0B1',\n      },\n      '&:hover fieldset': {\n        borderColor: '#8ED0B1',\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: '#8ED0B1',\n      },\n    },\n  },\n})(TextField);\n\nconst styles = ({\n  root: {\n    textAlign: 'center'\n  },\n  textField: {\n    width: \"50%\"\n  },\n  button: {\n    marginLeft: \"48%\",\n  },\n});\n\nclass Practice extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      index: 0,\n      answer: \"\",\n      rightAnswer: props.words[0][1].split(\" | \"),\n      answered: [],\n      helperText: \"\",\n      editIndex: false\n    }\n  }\n\n  handleChange = event => {      \n    if (event.key === 'Enter'){ return; }\n    document.getElementById(\"answer\").style.color = 'black'; \n    this.setState({answer: event.target.value});\n  };\n\n  hint = () => {\n    const {rightAnswer, answered} = this.state;\n    let answer = \"\";\n    for (let i=0; i<rightAnswer.length; i+=1){\n      if(!answered.includes(rightAnswer[i])){\n        answer = rightAnswer[i];\n        break;\n      }\n    }\n    this.setState({answer});\n  }\n\n  changeIndex = () =>{\n    const {words} = this.props;\n    const new_index = parseInt(document.getElementById(\"newIndex\").value, 10) - 1;\n    if (new_index > words.length) return;\n    this.setState({editIndex: false, index: new_index, answer: \"\", answered: [], rightAnswer: words[new_index][1].split(\" | \")})\n  }\n\n  handleKeyPress = event => {   \n    if (event.key === \"Enter\"){\n      const {rightAnswer, answer, answered, index} = this.state;\n      const {words, addWord, direction} = this.props;\n      const  word = words[index][0];\n      if(rightAnswer.includes(answer) && !answered.includes(answer)){\n        answered.push(answer);\n        let update = false;\n        if(rightAnswer.length <= answered.length){\n          const new_index = index < words.length - 1 ? index+1 : 0;\n          this.setState({index: new_index, answer: \"\", answered: [], rightAnswer: words[new_index][1].split(\" | \")});\n          update = true;\n        }else{\n          this.setState({answered, answer: \"\"})\n        }\n        const practicedWord = `${direction? answer : word} * ${direction? word: answer}`;\n        addWord(practicedWord, update);\n      }else if(rightAnswer.includes(answer) && answered.includes(answer)){\n        document.getElementById(\"answer\").style.color = 'orange'; \n      }else{\n        document.getElementById(\"answer\").style.color = 'red'; \n        const wrongWords = rightAnswer.filter(n => !answered.includes(n));\n        for(let i=0; i<wrongWords.length; i+=1){\n          const practicedWord = `${direction? wrongWords[i] : word} * ${direction? word: wrongWords[i]}`;\n          addWord(practicedWord, false);\n        }\n      }\n      \n    }\n  }\n\n  render(){\n    const {classes, words, direction} = this.props;\n    const {index, answer, rightAnswer, answered, helperText, editIndex} = this.state;  \n    \n    return (\n      <div>\n        <Paper className={classes.root}>\n          {\n            words.length === 0 ?\n              <Typography variant=\"h5\" component=\"h3\">\n                No matching words.\n              </Typography>: <div>\n                  <Button variant=\"text\" \n                    size=\"large\" \n                    className={classes.button} \n                    endIcon={editIndex? <DeleteIcon onClick={() => {this.setState({editIndex: false})}} />: <EditIcon onClick={() => {this.setState({editIndex: true})}} />}>\n                      {editIndex? <TextField\n                        id=\"newIndex\"\n                        label=\"Max 15\"\n                        defaultValue={index+1}\n                        className={classes.textField}\n                        variant=\"outlined\"\n                        style={{width: \"70px\"}}\n                      /> : `${index+1}.`}\n                    {editIndex && <SaveIcon onClick={this.changeIndex} />}\n                </Button>\n                <Grid container spacing={2}>\n                  <Grid item xs={5}>\n                    <Typography variant=\"h4\" component=\"h3\" align=\"right\">\n                      {words[index][0]}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={7}>\n                    <Typography variant=\"h6\" component=\"h3\" align=\"left\">\n                      {`| ${answered.join(\" | \")}`}\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <CssTextField\n                        id={\"answer\"}\n                        label={`${direction? \"English\" : \"Armenian\"} ${answered.length+1} - ${rightAnswer.length}`}\n                        className={classes.textField}\n                        value={answer}\n                        onChange={this.handleChange}\n                        onKeyPress={this.handleKeyPress}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        autoComplete=\"off\"\n                        autoFocus={true}\n                        helperText={helperText}\n                      /><br/>\n                <Button color=\"primary\" size=\"small\" className={classes.button} onClick={this.hint}>\n                  Hint\n                </Button>\n              </div>\n          }\n        </Paper>\n      </div>\n    );\n  } \n}\n\nexport default withStyles(styles)(Practice);","import React from 'react';\nimport Show from './Show';\nimport Practice from './Practice';\n\nfunction orderWords(words, order){\n    if (order === 'alphabetical'){\n        words.sort(function (a, b) {\n            if (a[0].toLowerCase() > b[0].toLowerCase()) {\n                return 1;\n            }\n            if (b[0].toLowerCase() > a[0].toLowerCase()) {\n                return -1;\n            }\n            return 0;\n        });\n\n    }else if (order === 'random'){\n        var currentIndex = words.length, temporaryValue, randomIndex;\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temporaryValue = words[currentIndex];\n            words[currentIndex] = words[randomIndex];\n            words[randomIndex] = temporaryValue;\n        }\n    }\n    return words;\n}\n\nfunction fixDirection(words, direction){\n    const result = [];\n    for (let i=0; i<words.length; i+=1){       \n        if(words[i].trim().length > 0){\n            let arm = words[i].split(\"*\")[1].trim();\n            let eng = words[i].split(\"*\")[0].trim();\n            if(direction){\n                let eng_words = eng;\n                for (let j=0; j<words.length; j+=1){\n                    if(words[j].trim().length > 0 && arm === words[j].split(\"*\")[1].trim() && !eng_words.includes(words[j].split(\"*\")[0].trim())){\n                        eng_words = `${eng_words} | ${words[j].split(\"*\")[0].trim()}`\n                    }\n                }               \n                result.push([arm, eng_words]);\n            }else{\n                let arm_words = arm;\n                for (let j=0; j<words.length; j+=1){\n                    if(words[j].trim().length > 0 && eng === words[j].split(\"*\")[0].trim() && !arm_words.includes(words[j].split(\"*\")[1].trim())){\n                        arm_words = `${arm_words} | ${words[j].split(\"*\")[1].trim()}`\n                    }\n                }\n                result.push([eng, arm_words])\n            }\n        }\n    }\n    const uniqueResult = [];\n    const includesWords = [];\n    for (let i=0; i <result.length; i+=1){\n        if(!includesWords.includes(result[i][0])){\n            includesWords.push(result[i][0]);\n            uniqueResult.push(result[i]);\n        }\n    }    \n    return uniqueResult;\n}\n\nexport default class Content extends React.Component{\n    constructor(props){\n        super(props);        \n        this.state = {\n            all: [],\n            wrong: [],\n            correct: [],\n            update: true\n        }\n    }\n\n    componentDidMount(){\n        const {level} = this.props;\n        var request = new XMLHttpRequest();\n        request.open('GET', `https://melqonyang.github.io/improve-your-english/words/${level}.txt`, true);\n        request.send(null);\n        request.onreadystatechange = () => {\n            if (request.readyState === 4 && request.status === 200) {\n                var type = request.getResponseHeader('Content-Type');\n                if (type.indexOf(\"text\") !== 1){\n                    const words = request.responseText.split('\\n');\n                    this.setState({all: words});\n                    document.getElementById(\"wordsCount\").innerHTML = `(${words.length - 1} words)`;\n                }\n            }\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps){\n        this.setState({update: true});\n        if(this.props.level !== nextProps.level){\n            const {level} = nextProps;\n            var request = new XMLHttpRequest();\n            request.open('GET', `https://melqonyang.github.io/improve-your-english/words/${level}.txt`, true);\n            request.send(null);\n            request.onreadystatechange = () => {\n                if (request.readyState === 4 && request.status === 200) {\n                    var type = request.getResponseHeader('Content-Type');\n                    if (type.indexOf(\"text\") !== 1) {\n                        const words = request.responseText.split('\\n');\n                        this.setState({all: words});\n                        document.getElementById(\"wordsCount\").innerHTML = `(${words.length} words)`;\n                    }\n                }\n            } \n        }\n        \n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const {mode, direction, count, order} = this.props;            \n        if (nextProps.mode !== mode || nextProps.direction !== direction || nextProps.count !== count || nextProps.order !== order) {          \n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    addWord = (word, isCorrect) => {\n        const {wrong, correct} = this.state;       \n        if(!isCorrect){      \n            this.setState({update: false});              \n            if (!wrong.includes(word)){\n                wrong.push(word);\n                this.setState({wrong});\n            }\n            if (correct.includes(word)){\n                correct.pop(correct.indexOf(word));\n                this.setState({correct});\n            }\n        }else{\n            this.setState({update: true});\n            if (!correct.includes(word)){\n                correct.push(word);\n                this.setState({correct});\n            }\n            if (wrong.includes(word)){\n                wrong.pop(wrong.indexOf(word));\n                this.setState({wrong});\n            }\n        }\n    }\n\n    render(){\n        const {mode, direction, count, order} = this.props;\n        let words = this.state[count];\n               \n        const {correct, wrong} = this.state;\n        words = fixDirection(words, direction);       \n        words = orderWords([...words], order);\n        \n        return (\n            <div>\n                {mode === 'show' ? <Show words={words} direction={direction} correct={correct} wrong={wrong}/> : <Practice words={words} direction={direction} addWord={this.addWord}/>}\n            </div>\n        )\n    }\n}","import React, { useState } from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport More from \"@material-ui/icons/ArrowDropDown\";\nimport Change from \"@material-ui/icons/SyncAlt\";\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Content from './Content';\n\nfunction getLevelName(label){\n    const parts = label.split(\"_\");\n    return parts[0].toUpperCase() + (parts[1] ? ` ${parts[1]}`: \"\");\n  }\n\nconst CRadio = withStyles({\n  root: {\n    color: \"#8ED0B1\",\n    '&$checked': {\n      color: \"#8ED0B1\",\n    },\n  },\n  checked: {},\n})(props => <Radio color=\"default\" {...props} />);\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  },\n  menu: {\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\"\n  },\n  button: {\n    margin: theme.spacing(1),\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\"\n  }\n}));\n\nconst modes = [\n  \"show all words\",\n  \"show only wrong words\",\n  \"show only correct words\",\n  \"practice all words\",\n  \"practice only wrong words\",\n  \"practice only correct words\"\n];\n\nexport default function CenteredGrid(props) {\n  const classes = useStyles();\n  const {level} = props;\n  const [direction, setDirection] = useState(true); // true -> arm or false -> eng\n  const [mode, setMode] = useState(\"show\"); // show or practioce\n  const [count, setCount] = useState(\"all\"); // all, wrongs or corrects\n  const [order, setOrder] = useState(\"random\"); // random, alphabetical or your\n  const [anchorElShow, setAnchorElShow] = React.useState(null);\n  const [anchorElPractice, setAnchorElPractice] = React.useState(null);\n\n  const handleClick = (event, what) => {\n    event.stopPropagation()\n    if (what === \"show\") {\n      setAnchorElShow(event.currentTarget);\n    } else {\n      setAnchorElPractice(event.currentTarget);\n    }\n  };\n\n  const handleClose = what => {\n    if (what === \"show\") {\n      setAnchorElShow(null);\n    } else {\n      setAnchorElPractice(null);\n    }\n  };\n\n  const changeCount = index => {\n    if (index < 3){\n      setMode(\"show\");\n      handleClose('show');\n    }else{\n      setMode(\"practice\");\n      handleClose('practice');\n    }\n    switch (index) {\n      case 0:\n      case 3:\n        setCount('all');\n        break;\n      case 1:\n      case 4:\n        setCount('wrong');\n        break;\n      case 2:\n      case 5:\n        setCount('correct');\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <Typography variant=\"h3\" component=\"h3\" gutterBottom align=\"center\">\n            {getLevelName(level)} <span id=\"wordsCount\" style={{fontSize: 15}}></span>\n            <Button\n              variant=\"contained\"\n              className={classes.button}\n              onClick={() => {\n                setDirection(!direction);\n              }}\n            >\n              {direction ? \"Arm\" : \"Eng\"} <Change /> {direction ? \"Eng\" : \"Arm\"}\n            </Button>\n          </Typography>\n        </Grid>\n        <Grid item xs={mode === \"show\" ? 8 : 4}>\n          <Button\n            variant=\"contained\"\n            fullWidth\n            className={classes.menu}\n            onClick={() => setMode(\"show\")}\n            endIcon={<More onClick={e => {handleClick(e, \"show\")}} />}\n            style={{\n              height: mode === \"show\" ? \"70px\" : \"50px\",\n              marginTop: mode === \"show\" ? \"0px\" : \"10px\"\n            }}\n          >\n            {mode === 'show' ? `Show ${count} in ${order} order` : \"Show\"}\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorElShow}\n            keepMounted\n            open={Boolean(anchorElShow)}\n            onClose={() => handleClose(\"show\")}\n          >\n            {modes.map((item, index) => {\n              return item.split(\" \")[0] === \"show\" ? (\n                <MenuItem key={item} onClick={()=>changeCount(index)}>\n                  {item}\n                </MenuItem>\n              ) : null;\n            })}\n          </Menu>\n        </Grid>\n        <Grid item xs={mode === \"show\" ? 4 : 8}>\n          <Button\n            variant=\"contained\"\n            onClick={() => setMode(\"practice\")}\n            fullWidth\n            className={classes.menu}\n            endIcon={\n              <More\n                onClick={e => {\n                  handleClick(e, \"practice\");\n                }}\n              />\n            }\n            style={{\n              height: mode === \"show\" ? \"50px\" : \"70px\",\n              marginTop: mode === \"show\" ? \"10px\" : \"0px\"\n            }}\n          >\n            {mode === 'practice'? `Practice ${count} in ${order} order` : \"Practice\"}\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorElPractice}\n            keepMounted\n            open={Boolean(anchorElPractice)}\n            onClose={() => handleClose(\"practice\")}\n          >\n            {modes.map((item, index) => {\n              return item.split(\" \")[0] === \"practice\" ? (\n                <MenuItem key={item} onClick={()=>changeCount(index)}>\n                  {item}\n                </MenuItem>\n              ) : null;\n            })}\n          </Menu>\n        </Grid>\n        <Grid item xs={12} style={{textAlign:\"center\"}}>\n        <FormControl>\n          <RadioGroup aria-label=\"position\" name=\"position\" value={order} onChange={(event) => {setOrder(event.target.value)}} row>\n            <FormControlLabel\n              value=\"random\"\n              control={<CRadio />}\n              label=\"Random order\"\n              labelPlacement=\"start\"\n            />\n            <FormControlLabel\n              value=\"alphabetical\"\n              control={<CRadio />}\n              label=\"Alphabetical order\"\n              labelPlacement=\"start\"\n            />\n            <FormControlLabel\n              value=\"your\"\n              control={<CRadio />}\n              label=\"My order\"\n              labelPlacement=\"start\"\n            />\n          </RadioGroup>\n        </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <Content level={level} mode={mode} direction={direction} count={count} order={order} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Actions from './Actions';\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: { main: '#8ED0B1' },\n    secondary: { main: \"#030303\" },\n    contrastThreshold: 3,\n    tonalOffset: 0.2\n  }\n});\n\nconst SELECTS = ['level_1', 'level_2', 'level_3', 'level_4', 'level_5', 'level_6', 'phrases', 'irregular_verbs', 'another', 'all']; \nfunction getLabelName(label){\n  const parts = label.split(\"_\");\n  return parts[0].toUpperCase() + (parts[1] ? ` ${parts[1]}`: \"\");\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`vertical-tabpanel-${index}`}\n      aria-labelledby={`vertical-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `vertical-tab-${index}`,\n    'aria-controls': `vertical-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    display: 'flex',\n    height: 224,\n  },\n  tabs: {\n    borderRight: `1px solid ${theme.palette.divider}`,\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\",\n    height: \"100vh\",\n    minWidth: \"17%\"\n  },\n}));\n\nexport default function AppBar() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <Tabs\n          orientation=\"vertical\"\n          variant=\"scrollable\"\n          value={value}\n          onChange={handleChange}\n          aria-label=\"Vertical tabs example\"\n          className={classes.tabs}\n        >\n          {\n            SELECTS.map((label, index) => <Tab key={label} label={getLabelName(label)} {...a11yProps(index)} />)\n          }\n        </Tabs>\n        <TabPanel value={value} index={value}>\n          <Actions level={SELECTS[value]} />\n        </TabPanel>\n      </div>\n    </MuiThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}