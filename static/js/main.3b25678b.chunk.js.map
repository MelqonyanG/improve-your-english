{"version":3,"sources":["Show.js","Practice.js","Content.js","Actions.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","tableWrapper","maxHeight","overflow","StickyHeadTable","props","classes","React","useState","page","setPage","rowsPerPage","setRowsPerPage","words","direction","rows","wrong","correct","result","i","length","arm","eng","word","correctness","includes","push","createData","columns","id","label","minWidth","createColumns","Paper","className","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","key","align","style","TableBody","slice","row","index","hover","role","tabIndex","value","format","TablePagination","rowsPerPageOptions","component","count","backIconButtonProps","nextIconButtonProps","onChangePage","event","newPage","onChangeRowsPerPage","target","CssTextField","withStyles","color","borderBottomColor","borderColor","TextField","Practice","handleKeyPress","state","answer","addWord","practicedWord","setState","helperText","document","getElementById","handleChange","this","Typography","variant","textField","onChange","onKeyPress","margin","autoComplete","autoFocus","Component","textAlign","Content","isCorrect","update","pop","indexOf","all","level","request","XMLHttpRequest","open","send","onreadystatechange","readyState","status","getResponseHeader","responseText","split","nextProps","nextState","mode","order","trim","fixDirection","sort","a","b","toLowerCase","temporaryValue","randomIndex","currentIndex","Math","floor","random","orderWords","CRadio","checked","Radio","theme","flexGrow","paper","padding","spacing","palette","text","secondary","menu","backgroundImage","button","modes","CenteredGrid","setDirection","setMode","setCount","setOrder","anchorElShow","setAnchorElShow","anchorElPractice","setAnchorElPractice","handleClick","what","stopPropagation","currentTarget","handleClose","changeCount","Grid","container","item","xs","gutterBottom","parts","toUpperCase","getLevelName","Button","onClick","fullWidth","endIcon","e","height","marginTop","Menu","anchorEl","keepMounted","Boolean","onClose","MenuItem","FormControl","RadioGroup","aria-label","name","FormControlLabel","control","labelPlacement","SELECTS","getLabelName","TabPanel","children","other","hidden","aria-labelledby","Box","p","backgroundColor","background","display","tabs","borderRight","divider","window","location","hostname","match","ReactDOM","render","setValue","Tabs","orientation","newValue","Tab","a11yProps","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b25678b.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nfunction createData(words, direction, wrong, correct) {  \n    const result = []\n    for (let i=0; i<words.length; i+=1){\n        const arm = direction? words[i][0]: words[i][1];\n        const eng = direction? words[i][1]: words[i][0];\n        const word = `${eng} * ${arm}`;\n        const correctness = wrong.includes(word)? 'wrong': (correct.includes(word)? 'correct': 'not practiced');\n        result.push({ arm, eng, correctness });\n    }\n    return result;\n}\n\nfunction createColumns(direction){\n    return direction? \n    [\n        { id: \"arm\", label: \"Armenian\", minWidth: 200 },\n        { id: \"eng\", label: \"English\", minWidth: 200 },\n        { id: \"correctness\", label: \"Correctness\", minWidth: 200 },\n    ] :\n    [\n        { id: \"eng\", label: \"English\", minWidth: 200 },\n        { id: \"arm\", label: \"Armenian\", minWidth: 200 },\n        { id: \"wrocorrectnessng\", label: \"Correctness\", minWidth: 200 },\n    ];\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\"\n  },\n  tableWrapper: {\n    maxHeight: 407,\n    overflow: \"auto\"\n  }\n});\n\nexport default function StickyHeadTable(props) {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const {words, direction, wrong, correct} = props;\n  const rows = createData(words, direction, wrong, correct);\n  const columns = createColumns(direction);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n        <Table stickyHeader>\n          <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.label}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row, index) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\n                    {columns.map(column => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={`cell${column.label}`} align={column.align}>\n                          {column.format && typeof value === \"number\"\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </div>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        backIconButtonProps={{\n          \"aria-label\": \"previous page\"\n        }}\n        nextIconButtonProps={{\n          \"aria-label\": \"next page\"\n        }}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nconst CssTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: '#8ED0B1',\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: '#8ED0B1',\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        borderColor: '#8ED0B1',\n      },\n      '&:hover fieldset': {\n        borderColor: '#8ED0B1',\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: '#8ED0B1',\n      },\n    },\n  },\n})(TextField);\n\nconst styles = ({\n  root: {\n    textAlign: 'center'\n  },\n  textField: {\n    width: \"50%\"\n  },\n});\n\nclass Practice extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      index: 0,\n      answer: \"\",\n      helperText: \"\"\n    }\n  }\n\n  handleKeyPress = event => {\n    if (event.key === \"Enter\"){\n      const { index, answer } = this.state;\n      const {words, addWord, direction} = this.props;\n      const word = words[index][1];\n      const practicedWord = direction? `${words[index][1]} * ${words[index][0]}`: `${words[index][0]} * ${words[index][1]}`; \n      if (word === answer){\n          if(index >= words.length - 1){this.setState({helperText: \"Already practiced.\"})};\n          this.setState({\n            index: index < words.length - 1 ? index+1 : 0,\n            answer: \"\"\n          });\n          addWord(practicedWord, true);\n      }else{\n          document.getElementById(\"outlined-name\").style.color = 'red';\n          addWord(practicedWord, false);\n      }      \n    }   \n  }\n\n  handleChange = event => {\n    if (event.key === 'Enter'){ return; }\n    document.getElementById(\"outlined-name\").style.color = 'black';     \n    this.setState({answer: event.target.value});\n  };\n\n  render(){\n    const {classes, words, direction} = this.props;\n    const {index, answer, helperText} = this.state;\n    \n    return (\n      <div>\n        <Paper className={classes.root}>\n          {\n            words.length === 0 ?\n              <Typography variant=\"h5\" component=\"h3\">\n                No matching words.\n              </Typography>: <div>\n                <Typography variant=\"h5\" component=\"h3\">\n                  {words[index][0]}\n                </Typography>\n                <CssTextField\n                  id=\"outlined-name\"\n                  label={direction? \"English\" : \"Armenian\"}\n                  className={classes.textField}\n                  value={answer}\n                  onChange={this.handleChange}\n                  onKeyPress={this.handleKeyPress}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  autoComplete=\"off\"\n                  autoFocus={true}\n                  helperText={helperText}\n                />\n              </div>\n          }\n        </Paper>\n      </div>\n    );\n  } \n}\n\nexport default withStyles(styles)(Practice);","import React from 'react';\nimport Show from './Show';\nimport Practice from './Practice';\n\nfunction orderWords(words, order){\n    if (order === 'alphabetical'){\n        words.sort(function (a, b) {\n            if (a[0].toLowerCase() > b[0].toLowerCase()) {\n                return 1;\n            }\n            if (b[0].toLowerCase() > a[0].toLowerCase()) {\n                return -1;\n            }\n            return 0;\n        });\n\n    }else if (order === 'random'){\n        var currentIndex = words.length, temporaryValue, randomIndex;\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temporaryValue = words[currentIndex];\n            words[currentIndex] = words[randomIndex];\n            words[randomIndex] = temporaryValue;\n        }\n    }\n    return words;\n}\n\nfunction fixDirection(words, direction){\n    const result = [];\n    for (let i=0; i<words.length; i+=1){       \n        if(words[i].trim().length > 0){\n            let arm = words[i].split(\"*\")[1].trim();\n            let eng = words[i].split(\"*\")[0].trim();\n            if(direction){\n                result.push([arm, eng]);\n            }else{\n                result.push([eng, arm])\n            }\n        }\n    }\n    return result;\n}\n\nexport default class Content extends React.Component{\n    constructor(props){\n        super(props);        \n        this.state = {\n            all: [],\n            wrong: [],\n            correct: [],\n            update: true\n        }\n    }\n\n    componentDidMount(){\n        const {level} = this.props;\n        var request = new XMLHttpRequest();\n        request.open('GET', `https://melqonyang.github.io/spelling-checker/words/${level}.txt`, true);\n        request.send(null);\n        request.onreadystatechange = () => {\n            if (request.readyState === 4 && request.status === 200) {\n                var type = request.getResponseHeader('Content-Type');\n                if (type.indexOf(\"text\") !== 1) {\n                    this.setState({all: request.responseText.split('\\n')});\n                }\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({update: true});\n        if(this.props.level !== nextProps.level){\n            const {level} = nextProps;\n            var request = new XMLHttpRequest();\n            request.open('GET', `https://melqonyang.github.io/spelling-checker/words/${level}.txt`, true);\n            request.send(null);\n            request.onreadystatechange = () => {\n                if (request.readyState === 4 && request.status === 200) {\n                    var type = request.getResponseHeader('Content-Type');\n                    if (type.indexOf(\"text\") !== 1) {\n                        this.setState({all: request.responseText.split('\\n')});\n                    }\n                }\n            } \n        }\n        \n    }\n\n    shouldComponentUpdate(nextProps, nextState) {            \n        if (nextState.update || nextProps.mode === 'show') {          \n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    addWord = (word, isCorrect) => {\n        const {wrong, correct} = this.state;       \n        if(!isCorrect){      \n            this.setState({update: false});              \n            if (!wrong.includes(word)){\n                wrong.push(word);\n                this.setState({wrong});\n            }\n            if (correct.includes(word)){\n                correct.pop(correct.indexOf(word));\n                this.setState({correct});\n            }\n        }else{\n            this.setState({update: true});\n            if (!correct.includes(word)){\n                correct.push(word);\n                this.setState({correct});\n            }\n            if (wrong.includes(word)){\n                wrong.pop(wrong.indexOf(word));\n                this.setState({wrong});\n            }\n        }\n    }\n\n    render(){\n        const {mode, direction, count, order} = this.props;\n        let words = this.state[count];       \n        const {correct, wrong} = this.state;\n        words = fixDirection(words, direction);       \n        words = orderWords([...words], order);\n        \n        return (\n            <div>\n                {mode === 'show' ? <Show words={words} direction={direction} correct={correct} wrong={wrong}/> : <Practice words={words} direction={direction} addWord={this.addWord}/>}\n            </div>\n        )\n    }\n}","import React, { useState } from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport More from \"@material-ui/icons/ArrowDropDown\";\nimport Change from \"@material-ui/icons/SyncAlt\";\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Content from './Content';\n\nfunction getLevelName(label){\n    const parts = label.split(\"_\");\n    return parts[0].toUpperCase() + (parts[1] ? ` ${parts[1]}`: \"\");\n  }\n\nconst CRadio = withStyles({\n  root: {\n    color: \"#8ED0B1\",\n    '&$checked': {\n      color: \"#8ED0B1\",\n    },\n  },\n  checked: {},\n})(props => <Radio color=\"default\" {...props} />);\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  },\n  menu: {\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\"\n  },\n  button: {\n    margin: theme.spacing(1),\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\"\n  }\n}));\n\nconst modes = [\n  \"show all words\",\n  \"show only wrong words\",\n  \"show only correct words\",\n  \"practice all words\",\n  \"practice only wrong words\",\n  \"practice only correct words\"\n];\n\nexport default function CenteredGrid(props) {\n  const classes = useStyles();\n  const {level} = props;\n  const [direction, setDirection] = useState(true); // true -> arm or false -> eng\n  const [mode, setMode] = useState(\"show\"); // show or practioce\n  const [count, setCount] = useState(\"all\"); // all, wrongs or corrects\n  const [order, setOrder] = useState(\"random\"); // random, alphabetical or your\n  const [anchorElShow, setAnchorElShow] = React.useState(null);\n  const [anchorElPractice, setAnchorElPractice] = React.useState(null);\n\n  const handleClick = (event, what) => {\n    event.stopPropagation()\n    if (what === \"show\") {\n      setAnchorElShow(event.currentTarget);\n    } else {\n      setAnchorElPractice(event.currentTarget);\n    }\n  };\n\n  const handleClose = what => {\n    if (what === \"show\") {\n      setAnchorElShow(null);\n    } else {\n      setAnchorElPractice(null);\n    }\n  };\n\n  const changeCount = index => {\n    if (index < 3){\n      setMode(\"show\");\n      handleClose('show');\n    }else{\n      setMode(\"practice\");\n      handleClose('practice');\n    }\n    switch (index) {\n      case 0:\n      case 3:\n        setCount('all');\n        break;\n      case 1:\n      case 4:\n        setCount('wrong');\n        break;\n      case 2:\n      case 5:\n        setCount('correct');\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <Typography variant=\"h3\" component=\"h3\" gutterBottom align=\"center\">\n            {getLevelName(level)}\n            <Button\n              variant=\"contained\"\n              className={classes.button}\n              onClick={() => {\n                setDirection(!direction);\n              }}\n            >\n              {direction ? \"Arm\" : \"Eng\"} <Change /> {direction ? \"Eng\" : \"Arm\"}\n            </Button>\n          </Typography>\n        </Grid>\n        <Grid item xs={mode === \"show\" ? 8 : 4}>\n          <Button\n            variant=\"contained\"\n            fullWidth\n            className={classes.menu}\n            onClick={() => setMode(\"show\")}\n            endIcon={<More onClick={e => {handleClick(e, \"show\")}} />}\n            style={{\n              height: mode === \"show\" ? \"70px\" : \"50px\",\n              marginTop: mode === \"show\" ? \"0px\" : \"10px\"\n            }}\n          >\n            {mode === 'show' ? `Show ${count} in ${order} order` : \"Show\"}\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorElShow}\n            keepMounted\n            open={Boolean(anchorElShow)}\n            onClose={() => handleClose(\"show\")}\n          >\n            {modes.map((item, index) => {\n              return item.split(\" \")[0] === \"show\" ? (\n                <MenuItem key={item} onClick={()=>changeCount(index)}>\n                  {item}\n                </MenuItem>\n              ) : null;\n            })}\n          </Menu>\n        </Grid>\n        <Grid item xs={mode === \"show\" ? 4 : 8}>\n          <Button\n            variant=\"contained\"\n            onClick={() => setMode(\"practice\")}\n            fullWidth\n            className={classes.menu}\n            endIcon={\n              <More\n                onClick={e => {\n                  handleClick(e, \"practice\");\n                }}\n              />\n            }\n            style={{\n              height: mode === \"show\" ? \"50px\" : \"70px\",\n              marginTop: mode === \"show\" ? \"10px\" : \"0px\"\n            }}\n          >\n            {mode === 'practice'? `Practice ${count} in ${order} order` : \"Practice\"}\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorElPractice}\n            keepMounted\n            open={Boolean(anchorElPractice)}\n            onClose={() => handleClose(\"practice\")}\n          >\n            {modes.map((item, index) => {\n              return item.split(\" \")[0] === \"practice\" ? (\n                <MenuItem key={item} onClick={()=>changeCount(index)}>\n                  {item}\n                </MenuItem>\n              ) : null;\n            })}\n          </Menu>\n        </Grid>\n        <Grid item xs={12} style={{textAlign:\"center\"}}>\n        <FormControl>\n          <RadioGroup aria-label=\"position\" name=\"position\" value={order} onChange={(event) => {setOrder(event.target.value)}} row>\n            <FormControlLabel\n              value=\"random\"\n              control={<CRadio />}\n              label=\"Random order\"\n              labelPlacement=\"start\"\n            />\n            <FormControlLabel\n              value=\"alphabetical\"\n              control={<CRadio />}\n              label=\"Alphabetical order\"\n              labelPlacement=\"start\"\n            />\n            <FormControlLabel\n              value=\"your\"\n              control={<CRadio />}\n              label=\"Your order\"\n              labelPlacement=\"start\"\n            />\n          </RadioGroup>\n        </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <Content level={level} mode={mode} direction={direction} count={count} order={order} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Actions from './Actions';\n\nconst SELECTS = ['level_1', 'level_2', 'level_3', 'level_4', 'level_5', 'level_6', 'phrases', 'irregular_verbs', 'another', 'all']; \nfunction getLabelName(label){\n  const parts = label.split(\"_\");\n  return parts[0].toUpperCase() + (parts[1] ? ` ${parts[1]}`: \"\");\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`vertical-tabpanel-${index}`}\n      aria-labelledby={`vertical-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `vertical-tab-${index}`,\n    'aria-controls': `vertical-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    display: 'flex',\n    height: 224,\n  },\n  tabs: {\n    borderRight: `1px solid ${theme.palette.divider}`,\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\",\n    height: \"100vh\",\n    minWidth: \"17%\"\n  },\n}));\n\nexport default function AppBar() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  return (\n    <div className={classes.root}>\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        value={value}\n        onChange={handleChange}\n        aria-label=\"Vertical tabs example\"\n        className={classes.tabs}\n      >\n        {\n          SELECTS.map((label, index) => <Tab key={label} label={getLabelName(label)} {...a11yProps(index)} />)\n        }\n      </Tabs>\n      <TabPanel value={value} index={value}>\n        <Actions level={SELECTS[value]} />\n      </TabPanel>\n\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}