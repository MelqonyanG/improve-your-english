{"version":3,"sources":["Content.js","Actions.js","App.js","serviceWorker.js","index.js"],"names":["readWords","level","console","log","request","XMLHttpRequest","open","send","onreadystatechange","readyState","status","getResponseHeader","indexOf","responseText","split","Content","props","state","words","wrongs","corrects","this","mode","direction","count","order","React","Component","CRadio","withStyles","root","color","checked","Radio","useStyles","makeStyles","theme","flexGrow","paper","padding","spacing","textAlign","palette","text","secondary","menu","backgroundImage","button","margin","modes","CenteredGrid","classes","useState","setDirection","setMode","setCount","setOrder","anchorElShow","setAnchorElShow","anchorElPractice","setAnchorElPractice","handleClick","event","what","stopPropagation","currentTarget","handleClose","changeCount","index","className","Grid","container","item","xs","Typography","variant","component","gutterBottom","align","label","parts","toUpperCase","getLevelName","Button","onClick","fullWidth","endIcon","e","style","height","marginTop","Menu","id","anchorEl","keepMounted","Boolean","onClose","map","MenuItem","key","FormControl","RadioGroup","aria-label","name","value","onChange","target","row","FormControlLabel","control","labelPlacement","SELECTS","getLabelName","TabPanel","children","other","role","hidden","aria-labelledby","Box","p","backgroundColor","background","display","tabs","borderRight","divider","minWidth","window","location","hostname","match","ReactDOM","render","setValue","Tabs","orientation","newValue","Tab","a11yProps","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f5410f8.chunk.js","sourcesContent":["import React from 'react';\n\nfunction readWords(level){\n    console.log(level);\n    var request = new XMLHttpRequest();\n    request.open('GET', `https://melqonyang.github.io/spelling-checker/${level}.txt`, true);\n    request.send(null);\n    request.onreadystatechange = () => {\n        if (request.readyState === 4 && request.status === 200) {\n            var type = request.getResponseHeader('Content-Type');\n            if (type.indexOf(\"text\") !== 1) {\n                console.log(request.responseText.split('\\n'));\n            }\n        }\n    }\n    return []\n}\n\nexport default class Content extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            words: readWords(props.level),\n            wrongs: {},\n            corrects: {}\n        }\n    }\n\n    render(){\n        const {level, mode, direction, count, order} = this.props;\n        return (\n            <div>\n                {level +  mode + direction+ count+ order}\n            </div>\n        )\n    }\n}","import React, { useState } from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport More from \"@material-ui/icons/ArrowDropDown\";\nimport Change from \"@material-ui/icons/SyncAlt\";\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Content from './Content';\n\nfunction getLevelName(label){\n    const parts = label.split(\"_\");\n    return parts[0].toUpperCase() + (parts[1] ? ` ${parts[1]}`: \"\");\n  }\n\nconst CRadio = withStyles({\n  root: {\n    color: \"#8ED0B1\",\n    '&$checked': {\n      color: \"#8ED0B1\",\n    },\n  },\n  checked: {},\n})(props => <Radio color=\"default\" {...props} />);\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  },\n  menu: {\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\"\n  },\n  button: {\n    margin: theme.spacing(1),\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\"\n  }\n}));\n\nconst modes = [\n  \"show all words\",\n  \"show only wrong words\",\n  \"show only correct words\",\n  \"practice all words\",\n  \"practice only wrong words\",\n  \"practice only correct words\"\n];\n\nexport default function CenteredGrid(props) {\n  const classes = useStyles();\n  const {level} = props;\n  const [direction, setDirection] = useState(true); // true -> arm or false -> eng\n  const [mode, setMode] = useState(\"show\"); // show or practioce\n  const [count, setCount] = useState(\"all\"); // all, wrongs or corrects\n  const [order, setOrder] = useState(\"random\"); // random, alphabetical or your\n  const [anchorElShow, setAnchorElShow] = React.useState(null);\n  const [anchorElPractice, setAnchorElPractice] = React.useState(null);\n\n  const handleClick = (event, what) => {\n    event.stopPropagation()\n    if (what === \"show\") {\n      setAnchorElShow(event.currentTarget);\n    } else {\n      setAnchorElPractice(event.currentTarget);\n    }\n  };\n\n  const handleClose = what => {\n    if (what === \"show\") {\n      setAnchorElShow(null);\n    } else {\n      setAnchorElPractice(null);\n    }\n  };\n\n  const changeCount = index => {\n    if (index < 3){\n      setMode(\"show\");\n      handleClose('show');\n    }else{\n      setMode(\"practice\");\n      handleClose('practice');\n    }\n    switch (index) {\n      case 0:\n      case 3:\n        setCount('all');\n        break;\n      case 1:\n      case 4:\n        setCount('wrong');\n        break;\n      case 2:\n      case 5:\n        setCount('correct');\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <Typography variant=\"h3\" component=\"h3\" gutterBottom align=\"center\">\n            {getLevelName(level)}\n            <Button\n              variant=\"contained\"\n              className={classes.button}\n              onClick={() => {\n                setDirection(!direction);\n              }}\n            >\n              {direction ? \"Arm\" : \"Eng\"} <Change /> {direction ? \"Eng\" : \"Arm\"}\n            </Button>\n          </Typography>\n        </Grid>\n        <Grid item xs={mode === \"show\" ? 8 : 4}>\n          <Button\n            variant=\"contained\"\n            fullWidth\n            className={classes.menu}\n            onClick={() => setMode(\"show\")}\n            endIcon={<More onClick={e => {handleClick(e, \"show\")}} />}\n            style={{\n              height: mode === \"show\" ? \"70px\" : \"50px\",\n              marginTop: mode === \"show\" ? \"0px\" : \"10px\"\n            }}\n          >\n            {mode === 'show' ? `Show ${count} in ${order} order` : \"Show\"}\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorElShow}\n            keepMounted\n            open={Boolean(anchorElShow)}\n            onClose={() => handleClose(\"show\")}\n          >\n            {modes.map((item, index) => {\n              return item.split(\" \")[0] === \"show\" ? (\n                <MenuItem key={item} onClick={()=>changeCount(index)}>\n                  {item}\n                </MenuItem>\n              ) : null;\n            })}\n          </Menu>\n        </Grid>\n        <Grid item xs={mode === \"show\" ? 4 : 8}>\n          <Button\n            variant=\"contained\"\n            onClick={() => setMode(\"practice\")}\n            fullWidth\n            className={classes.menu}\n            endIcon={\n              <More\n                onClick={e => {\n                  handleClick(e, \"practice\");\n                }}\n              />\n            }\n            style={{\n              height: mode === \"show\" ? \"50px\" : \"70px\",\n              marginTop: mode === \"show\" ? \"10px\" : \"0px\"\n            }}\n          >\n            {mode === 'practice'? `Practice ${count} in ${order} order` : \"Practice\"}\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorElPractice}\n            keepMounted\n            open={Boolean(anchorElPractice)}\n            onClose={() => handleClose(\"practice\")}\n          >\n            {modes.map((item, index) => {\n              return item.split(\" \")[0] === \"practice\" ? (\n                <MenuItem key={item} onClick={()=>changeCount(index)}>\n                  {item}\n                </MenuItem>\n              ) : null;\n            })}\n          </Menu>\n        </Grid>\n        <Grid item xs={12} style={{textAlign:\"center\"}}>\n        <FormControl>\n          <RadioGroup aria-label=\"position\" name=\"position\" value={order} onChange={(event) => {setOrder(event.target.value)}} row>\n            <FormControlLabel\n              value=\"random\"\n              control={<CRadio />}\n              label=\"Random order\"\n              labelPlacement=\"start\"\n            />\n            <FormControlLabel\n              value=\"alphabetical\"\n              control={<CRadio />}\n              label=\"Alphabetical order\"\n              labelPlacement=\"start\"\n            />\n            <FormControlLabel\n              value=\"your\"\n              control={<CRadio />}\n              label=\"Your order\"\n              labelPlacement=\"start\"\n            />\n          </RadioGroup>\n        </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <Content level={level} mode={mode} direction={direction} count={count} order={order} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Actions from './Actions';\n\nconst SELECTS = ['level_1', 'level_2', 'level_3', 'level_4', 'level_5', 'level_6', 'phrases', 'irregular_verbs', 'another', 'all']; \nfunction getLabelName(label){\n  const parts = label.split(\"_\");\n  return parts[0].toUpperCase() + (parts[1] ? ` ${parts[1]}`: \"\");\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`vertical-tabpanel-${index}`}\n      aria-labelledby={`vertical-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `vertical-tab-${index}`,\n    'aria-controls': `vertical-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    display: 'flex',\n    height: 224,\n  },\n  tabs: {\n    borderRight: `1px solid ${theme.palette.divider}`,\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\",\n    height: \"100vh\",\n    minWidth: \"17%\"\n  },\n}));\n\nexport default function AppBar() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  return (\n    <div className={classes.root}>\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        value={value}\n        onChange={handleChange}\n        aria-label=\"Vertical tabs example\"\n        className={classes.tabs}\n      >\n        {\n          SELECTS.map((label, index) => <Tab key={label} label={getLabelName(label)} {...a11yProps(index)} />)\n        }\n      </Tabs>\n      <TabPanel value={value} index={value}>\n        <Actions level={SELECTS[value]} />\n      </TabPanel>\n\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}