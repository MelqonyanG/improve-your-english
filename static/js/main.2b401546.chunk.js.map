{"version":3,"sources":["Show.js","Practice.js","Content.js","Actions.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","tableWrapper","maxHeight","overflow","StickyHeadTable","props","classes","React","useState","page","setPage","rowsPerPage","setRowsPerPage","words","direction","rows","result","i","length","arm","eng","push","wrong","correct","createData","columns","id","label","minWidth","createColumns","Paper","className","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","key","align","style","TableBody","slice","row","index","hover","role","tabIndex","value","format","TablePagination","rowsPerPageOptions","component","count","backIconButtonProps","nextIconButtonProps","onChangePage","event","newPage","onChangeRowsPerPage","target","CssTextField","withStyles","color","borderBottomColor","borderColor","TextField","Practice","handleKeyPress","state","answer","setState","document","getElementById","handleChange","this","console","log","Typography","variant","textField","onChange","onKeyPress","margin","autoComplete","autoFocus","Component","textAlign","Content","all","level","mode","order","split","trim","fixDirection","sort","temporaryValue","randomIndex","currentIndex","Math","floor","random","orderWords","CRadio","checked","Radio","theme","flexGrow","paper","padding","spacing","palette","text","secondary","menu","backgroundImage","button","modes","CenteredGrid","setDirection","setMode","setCount","setOrder","anchorElShow","setAnchorElShow","anchorElPractice","setAnchorElPractice","handleClick","what","stopPropagation","currentTarget","handleClose","changeCount","Grid","container","item","xs","gutterBottom","parts","toUpperCase","getLevelName","Button","onClick","fullWidth","endIcon","e","height","marginTop","Menu","anchorEl","keepMounted","open","Boolean","onClose","MenuItem","FormControl","RadioGroup","aria-label","name","FormControlLabel","control","labelPlacement","SELECTS","getLabelName","TabPanel","children","other","hidden","aria-labelledby","Box","p","backgroundColor","background","display","tabs","borderRight","divider","window","location","hostname","match","ReactDOM","render","setValue","Tabs","orientation","newValue","Tab","a11yProps","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b401546.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nfunction createData(words, direction) {\n    const result = []\n    for (let i=0; i<words.length; i+=1){\n        const arm = direction? words[i][0]: words[i][1];\n        const eng = direction? words[i][1]: words[i][0];\n        result.push({ arm: arm, eng: eng, wrong: 0, correct: 1 });\n    }\n    return result;\n}\n\nfunction createColumns(direction){\n    return direction? \n    [\n        { id: \"arm\", label: \"Armenian\", minWidth: 200 },\n        { id: \"eng\", label: \"English\", minWidth: 200 },\n        { id: \"wrong\", label: \"Wrong\", minWidth: 100 },\n        { id: \"correct\", label: \"Correct\", minWidth: 100 }\n    ] :\n    [\n        { id: \"eng\", label: \"English\", minWidth: 200 },\n        { id: \"arm\", label: \"Armenian\", minWidth: 200 },\n        { id: \"wrong\", label: \"Wrong\", minWidth: 100 },\n        { id: \"correct\", label: \"Correct\", minWidth: 100 }\n    ];\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\"\n  },\n  tableWrapper: {\n    maxHeight: 407,\n    overflow: \"auto\"\n  }\n});\n\nexport default function StickyHeadTable(props) {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const {words, direction} = props;\n  const rows = createData(words, direction);\n  const columns = createColumns(direction);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n        <Table stickyHeader>\n          <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.label}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row, index) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\n                    {columns.map(column => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={`cell${column.label}`} align={column.align}>\n                          {column.format && typeof value === \"number\"\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </div>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        backIconButtonProps={{\n          \"aria-label\": \"previous page\"\n        }}\n        nextIconButtonProps={{\n          \"aria-label\": \"next page\"\n        }}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nconst CssTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: '#8ED0B1',\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: '#8ED0B1',\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        borderColor: '#8ED0B1',\n      },\n      '&:hover fieldset': {\n        borderColor: '#8ED0B1',\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: '#8ED0B1',\n      },\n    },\n  },\n})(TextField);\n\nconst styles = ({\n  root: {\n    textAlign: 'center'\n  },\n  textField: {\n    width: \"50%\"\n  },\n});\n\nclass Practice extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      index: 0,\n      answer: \"\"\n    }\n  }\n\n  handleKeyPress = event => {\n    if (event.key === \"Enter\"){\n      const { index, answer } = this.state;\n      const {words} = this.props;\n      const word = words[index][1];\n      if (word === answer){\n          this.setState({\n            index: index+1,\n            answer: \"\"\n          })\n      }else{\n          document.getElementById(\"outlined-name\").style.color = 'red';\n      }      \n    }   \n  }\n\n  handleChange = event => {\n    if (event.key === 'Enter'){ return; }\n    document.getElementById(\"outlined-name\").style.color = 'black';     \n    this.setState({answer: event.target.value});\n  };\n\n  render(){\n    const {classes, words, direction} = this.props;\n    const {index, answer} = this.state;\n    console.log(answer);\n    \n    return (\n      <div>\n        <Paper className={classes.root}>\n          {\n            words.length === 0 ?\n              <Typography variant=\"h5\" component=\"h3\">\n                No matching words.\n              </Typography>: <div>\n                <Typography variant=\"h5\" component=\"h3\">\n                  {words[index][0]}\n                </Typography>\n                <CssTextField\n                  id=\"outlined-name\"\n                  label={direction? \"English\" : \"Armenian\"}\n                  className={classes.textField}\n                  value={answer}\n                  onChange={this.handleChange}\n                  onKeyPress={this.handleKeyPress}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  autoComplete=\"off\"\n                  autoFocus={true}\n                />\n              </div>\n          }\n        </Paper>\n      </div>\n    );\n  } \n}\n\nexport default withStyles(styles)(Practice);","import React from 'react';\nimport Show from './Show';\nimport Practice from './Practice';\n\nfunction readWords(level){\n    // var request = new XMLHttpRequest();\n    // request.open('GET', `https://melqonyang.github.io/spelling-checker/${level}.txt`, true);\n    // request.send(null);\n    // request.onreadystatechange = () => {\n    //     if (request.readyState === 4 && request.status === 200) {\n    //         var type = request.getResponseHeader('Content-Type');\n    //         if (type.indexOf(\"text\") !== 1) {\n    //             console.log(request.responseText.split('\\n'));\n    //         }\n    //     }\n    // }\n    return [\"aaaa * oooo\", \"ooop * afdasfd\"]\n}\n\nfunction orderWords(words, order){\n    if (order === 'alphabetical'){\n        words.sort();\n    }else if (order === 'random'){\n        var currentIndex = words.length, temporaryValue, randomIndex;\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temporaryValue = words[currentIndex];\n            words[currentIndex] = words[randomIndex];\n            words[randomIndex] = temporaryValue;\n        }\n    }\n    return words;\n}\n\nfunction fixDirection(words, direction){\n    const result = [];\n    for (let i=0; i<words.length; i+=1){\n        let arm = words[i].split(\"*\")[1].trim();\n        let eng = words[i].split(\"*\")[0].trim();\n        if(direction){\n            result.push([arm, eng]);\n        }else{\n            result.push([eng, arm])\n        }\n    }\n    return result;\n}\n\nexport default class Content extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            all: readWords(props.level),\n            wrong: [],\n            correct: []\n        }\n    }\n\n    render(){\n        const {mode, direction, count, order} = this.props;\n        let words = this.state[count];\n        words = orderWords([...words], order);\n        words = fixDirection(words, direction);       \n        \n        return (\n            <div>\n                {mode === 'show' ? <Show words={words} direction={direction}/> : <Practice words={words} direction={direction} />}\n            </div>\n        )\n    }\n}","import React, { useState } from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport More from \"@material-ui/icons/ArrowDropDown\";\nimport Change from \"@material-ui/icons/SyncAlt\";\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Content from './Content';\n\nfunction getLevelName(label){\n    const parts = label.split(\"_\");\n    return parts[0].toUpperCase() + (parts[1] ? ` ${parts[1]}`: \"\");\n  }\n\nconst CRadio = withStyles({\n  root: {\n    color: \"#8ED0B1\",\n    '&$checked': {\n      color: \"#8ED0B1\",\n    },\n  },\n  checked: {},\n})(props => <Radio color=\"default\" {...props} />);\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  },\n  menu: {\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\"\n  },\n  button: {\n    margin: theme.spacing(1),\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\"\n  }\n}));\n\nconst modes = [\n  \"show all words\",\n  \"show only wrong words\",\n  \"show only correct words\",\n  \"practice all words\",\n  \"practice only wrong words\",\n  \"practice only correct words\"\n];\n\nexport default function CenteredGrid(props) {\n  const classes = useStyles();\n  const {level} = props;\n  const [direction, setDirection] = useState(true); // true -> arm or false -> eng\n  const [mode, setMode] = useState(\"show\"); // show or practioce\n  const [count, setCount] = useState(\"all\"); // all, wrongs or corrects\n  const [order, setOrder] = useState(\"random\"); // random, alphabetical or your\n  const [anchorElShow, setAnchorElShow] = React.useState(null);\n  const [anchorElPractice, setAnchorElPractice] = React.useState(null);\n\n  const handleClick = (event, what) => {\n    event.stopPropagation()\n    if (what === \"show\") {\n      setAnchorElShow(event.currentTarget);\n    } else {\n      setAnchorElPractice(event.currentTarget);\n    }\n  };\n\n  const handleClose = what => {\n    if (what === \"show\") {\n      setAnchorElShow(null);\n    } else {\n      setAnchorElPractice(null);\n    }\n  };\n\n  const changeCount = index => {\n    if (index < 3){\n      setMode(\"show\");\n      handleClose('show');\n    }else{\n      setMode(\"practice\");\n      handleClose('practice');\n    }\n    switch (index) {\n      case 0:\n      case 3:\n        setCount('all');\n        break;\n      case 1:\n      case 4:\n        setCount('wrong');\n        break;\n      case 2:\n      case 5:\n        setCount('correct');\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <Typography variant=\"h3\" component=\"h3\" gutterBottom align=\"center\">\n            {getLevelName(level)}\n            <Button\n              variant=\"contained\"\n              className={classes.button}\n              onClick={() => {\n                setDirection(!direction);\n              }}\n            >\n              {direction ? \"Arm\" : \"Eng\"} <Change /> {direction ? \"Eng\" : \"Arm\"}\n            </Button>\n          </Typography>\n        </Grid>\n        <Grid item xs={mode === \"show\" ? 8 : 4}>\n          <Button\n            variant=\"contained\"\n            fullWidth\n            className={classes.menu}\n            onClick={() => setMode(\"show\")}\n            endIcon={<More onClick={e => {handleClick(e, \"show\")}} />}\n            style={{\n              height: mode === \"show\" ? \"70px\" : \"50px\",\n              marginTop: mode === \"show\" ? \"0px\" : \"10px\"\n            }}\n          >\n            {mode === 'show' ? `Show ${count} in ${order} order` : \"Show\"}\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorElShow}\n            keepMounted\n            open={Boolean(anchorElShow)}\n            onClose={() => handleClose(\"show\")}\n          >\n            {modes.map((item, index) => {\n              return item.split(\" \")[0] === \"show\" ? (\n                <MenuItem key={item} onClick={()=>changeCount(index)}>\n                  {item}\n                </MenuItem>\n              ) : null;\n            })}\n          </Menu>\n        </Grid>\n        <Grid item xs={mode === \"show\" ? 4 : 8}>\n          <Button\n            variant=\"contained\"\n            onClick={() => setMode(\"practice\")}\n            fullWidth\n            className={classes.menu}\n            endIcon={\n              <More\n                onClick={e => {\n                  handleClick(e, \"practice\");\n                }}\n              />\n            }\n            style={{\n              height: mode === \"show\" ? \"50px\" : \"70px\",\n              marginTop: mode === \"show\" ? \"10px\" : \"0px\"\n            }}\n          >\n            {mode === 'practice'? `Practice ${count} in ${order} order` : \"Practice\"}\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorElPractice}\n            keepMounted\n            open={Boolean(anchorElPractice)}\n            onClose={() => handleClose(\"practice\")}\n          >\n            {modes.map((item, index) => {\n              return item.split(\" \")[0] === \"practice\" ? (\n                <MenuItem key={item} onClick={()=>changeCount(index)}>\n                  {item}\n                </MenuItem>\n              ) : null;\n            })}\n          </Menu>\n        </Grid>\n        <Grid item xs={12} style={{textAlign:\"center\"}}>\n        <FormControl>\n          <RadioGroup aria-label=\"position\" name=\"position\" value={order} onChange={(event) => {setOrder(event.target.value)}} row>\n            <FormControlLabel\n              value=\"random\"\n              control={<CRadio />}\n              label=\"Random order\"\n              labelPlacement=\"start\"\n            />\n            <FormControlLabel\n              value=\"alphabetical\"\n              control={<CRadio />}\n              label=\"Alphabetical order\"\n              labelPlacement=\"start\"\n            />\n            <FormControlLabel\n              value=\"your\"\n              control={<CRadio />}\n              label=\"Your order\"\n              labelPlacement=\"start\"\n            />\n          </RadioGroup>\n        </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <Content level={level} mode={mode} direction={direction} count={count} order={order} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Actions from './Actions';\n\nconst SELECTS = ['level_1', 'level_2', 'level_3', 'level_4', 'level_5', 'level_6', 'phrases', 'irregular_verbs', 'another', 'all']; \nfunction getLabelName(label){\n  const parts = label.split(\"_\");\n  return parts[0].toUpperCase() + (parts[1] ? ` ${parts[1]}`: \"\");\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`vertical-tabpanel-${index}`}\n      aria-labelledby={`vertical-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `vertical-tab-${index}`,\n    'aria-controls': `vertical-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    display: 'flex',\n    height: 224,\n  },\n  tabs: {\n    borderRight: `1px solid ${theme.palette.divider}`,\n    backgroundImage: \"linear-gradient(#1f4037, #99f2c8)\",\n    color: \"white\",\n    height: \"100vh\",\n    minWidth: \"17%\"\n  },\n}));\n\nexport default function AppBar() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  return (\n    <div className={classes.root}>\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        value={value}\n        onChange={handleChange}\n        aria-label=\"Vertical tabs example\"\n        className={classes.tabs}\n      >\n        {\n          SELECTS.map((label, index) => <Tab key={label} label={getLabelName(label)} {...a11yProps(index)} />)\n        }\n      </Tabs>\n      <TabPanel value={value} index={value}>\n        <Actions level={SELECTS[value]} />\n      </TabPanel>\n\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}